[{"path":"src/main/java/seedu/address/commons/util/StringUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2016-09-23","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-15","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2016-09-21","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.StringWriter;","lastModifiedDate":"2016-09-21","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-19","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Helper functions for handling strings.","lastModifiedDate":"2016-08-08","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class StringUtil {","lastModifiedDate":"2016-08-08","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-13","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}.","lastModifiedDate":"2016-10-13","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *   Ignores case, but a full word match is required.","lastModifiedDate":"2016-10-13","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *   \u003cbr\u003eexamples:\u003cpre\u003e","lastModifiedDate":"2016-10-13","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true","lastModifiedDate":"2016-10-13","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true","lastModifiedDate":"2016-10-13","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match","lastModifiedDate":"2016-10-13","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *       \u003c/pre\u003e","lastModifiedDate":"2016-10-13","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param sentence cannot be null","lastModifiedDate":"2016-10-13","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param word cannot be null, cannot be empty, must be a single word","lastModifiedDate":"2016-10-13","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static boolean containsWordIgnoreCase(String sentence, String word) {","lastModifiedDate":"2016-10-13","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"        requireNonNull(sentence);","lastModifiedDate":"2017-05-15","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"        requireNonNull(word);","lastModifiedDate":"2017-05-15","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"        String preppedWord \u003d word.trim();","lastModifiedDate":"2016-10-13","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");","lastModifiedDate":"2017-05-15","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");","lastModifiedDate":"2017-05-15","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String preppedSentence \u003d sentence;","lastModifiedDate":"2016-10-13","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");","lastModifiedDate":"2016-10-13","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Arrays.stream(wordsInPreppedSentence)","lastModifiedDate":"2018-01-21","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"                .anyMatch(preppedWord::equalsIgnoreCase);","lastModifiedDate":"2018-01-21","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Returns a detailed message of the t, including the stack trace.","lastModifiedDate":"2016-09-21","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static String getDetails(Throwable t) {","lastModifiedDate":"2016-09-21","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"        requireNonNull(t);","lastModifiedDate":"2017-05-15","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"-"},"content":"        StringWriter sw \u003d new StringWriter();","lastModifiedDate":"2016-09-21","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));","lastModifiedDate":"2016-09-21","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();","lastModifiedDate":"2016-09-21","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-22","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer","lastModifiedDate":"2017-06-02","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e","lastModifiedDate":"2017-06-02","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Will return false for any other non-null string input","lastModifiedDate":"2017-06-02","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)","lastModifiedDate":"2017-06-02","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code s} is null.","lastModifiedDate":"2017-06-02","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-22","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {","lastModifiedDate":"2017-06-02","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"-"},"content":"        requireNonNull(s);","lastModifiedDate":"2017-06-02","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-06-02","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"-"},"content":"            int value \u003d Integer.parseInt(s);","lastModifiedDate":"2017-06-02","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)","lastModifiedDate":"2017-06-02","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2017-06-02","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-06-02","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-02","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"adoubleb"},"content":"    //Generating methods related to calculating similarity index were aided by Intellij AIAssistant","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"adoubleb"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Computes a refined similarity index between two strings.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Combines multiple factors for more accuracy.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * @param a First string","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * @param b Second string","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * @return Similarity index between 0.0 (completely dissimilar) and 1.0 (identical)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public static double calculateSimilarity(String a, String b) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"-"},"content":"        if (a \u003d\u003d null || b \u003d\u003d null || a.isEmpty() || b.isEmpty()) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"-"},"content":"            return 0.0;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"-"},"content":"        // 1. Levenshtein Distance Contribution","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"-"},"content":"        int distance \u003d levenshteinDistance(a, b);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"-"},"content":"        double maxLength \u003d Math.max(a.length(), b.length());","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"-"},"content":"        double editDistanceScore \u003d 1 - (double) distance / maxLength; // Normalized to [0, 1]","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // 2. Overlap Score (based on common substrings)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"-"},"content":"        double overlapScore \u003d computeOverlapScore(a, b);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // 3. Length Ratio Score (penalizes large length differences)","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"-"},"content":"        double lengthRatioScore \u003d computeLengthRatioScore(a, b);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // Combine the scores","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"-"},"content":"        double similarityIndex \u003d (0.6 * editDistanceScore) + (0.3 * overlapScore) + (0.1 * lengthRatioScore);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return similarityIndex;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Computes the Levenshtein distance (edit distance) between two strings.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"-"},"content":"    private static int levenshteinDistance(String a, String b) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"-"},"content":"        int[][] dp \u003d new int[a.length() + 1][b.length() + 1];","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c\u003d a.length(); i++) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"-"},"content":"            for (int j \u003d 0; j \u003c\u003d b.length(); j++) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"-"},"content":"                if (i \u003d\u003d 0) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"-"},"content":"                    dp[i][j] \u003d j;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"-"},"content":"                } else if (j \u003d\u003d 0) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"-"},"content":"                    dp[i][j] \u003d i;","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"-"},"content":"                } else {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"-"},"content":"                    dp[i][j] \u003d Math.min(dp[i - 1][j - 1] + (a.charAt(i - 1) \u003d\u003d b.charAt(j - 1) ? 0 : 1),","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"-"},"content":"                            Math.min(dp[i - 1][j] + 1, dp[i][j - 1] + 1));","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"-"},"content":"        return dp[a.length()][b.length()];","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * Compute substring overlap score, measuring the proportion of characters in common.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"-"},"content":"    private static double computeOverlapScore(String a, String b) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"-"},"content":"        Set\u003cCharacter\u003e setA \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"-"},"content":"        for (char c : a.toCharArray()) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"-"},"content":"            setA.add(c);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"-"},"content":"        Set\u003cCharacter\u003e setB \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"-"},"content":"        for (char c : b.toCharArray()) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"-"},"content":"            setB.add(c);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"-"},"content":"        // Calculate intersection and union of character sets","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"-"},"content":"        Set\u003cCharacter\u003e intersection \u003d new HashSet\u003c\u003e(setA);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"-"},"content":"        intersection.retainAll(setB);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"-"},"content":"        Set\u003cCharacter\u003e union \u003d new HashSet\u003c\u003e(setA);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"-"},"content":"        union.addAll(setB);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"-"},"content":"        // Return the overlap score as intersection size divided by union size","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"-"},"content":"        return (double) intersection.size() / union.size();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * Compute the length-based similarity score, penalizing large differences in length.","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"-"},"content":"    private static double computeLengthRatioScore(String a, String b) {","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"-"},"content":"        double lengthA \u003d a.length();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"-"},"content":"        double lengthB \u003d b.length();","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"-"},"content":"        return Math.min(lengthA, lengthB) / Math.max(lengthA, lengthB);","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-28","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08","isFullCredit":false}],"authorContributionMap":{"adoubleb":2,"-":158}},{"path":"src/main/java/seedu/address/logic/commands/ConfirmableCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"adoubleb"},"content":"//Solution below inspired by:","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"adoubleb"},"content":"//https://github.com/AY2425S2-CS2103T-W12-4/tp/blob/master/src/main/java/tassist/address/logic/commands/","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"adoubleb"},"content":"","lastModifiedDate":"2025-04-06","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Represents a command that requires a confirmation step before execution.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Classes implementing this interface should define the specific logic for confirmation and execution.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"public interface ConfirmableCommand {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-26","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public CommandResult executeConfirmed(Model model) throws CommandException;","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public CommandResult executeAborted();","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2025-03-17","isFullCredit":false}],"authorContributionMap":{"adoubleb":3,"-":15}}]
