[{"path":"src/main/java/syncsquad/teamsync/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package syncsquad.teamsync.logic.parser;","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"xplus2g4"},"content":"import static syncsquad.teamsync.logic.Messages.MESSAGE_INVALID_START_END_TIME;","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.time.LocalDate;","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.time.LocalTime;","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.time.format.DateTimeFormatterBuilder;","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.time.format.ResolverStyle;","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.time.temporal.ChronoField;","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"import syncsquad.teamsync.commons.core.index.Index;","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"import syncsquad.teamsync.commons.util.StringUtil;","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"import syncsquad.teamsync.logic.parser.exceptions.ParseException;","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"import syncsquad.teamsync.model.module.Day;","lastModifiedDate":"2025-03-20","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"import syncsquad.teamsync.model.module.Module;","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"import syncsquad.teamsync.model.module.ModuleCode;","lastModifiedDate":"2025-03-20","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"import syncsquad.teamsync.model.person.Address;","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"import syncsquad.teamsync.model.person.Email;","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"import syncsquad.teamsync.model.person.Name;","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"import syncsquad.teamsync.model.person.Phone;","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"import syncsquad.teamsync.model.tag.Tag;","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":" * classes.","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_DATE_FORMAT \u003d \"Invalid date format: Date should be in dd-mm-yyyy format\";","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_TIME_FORMAT \u003d \"Invalid time format: Time should be in HH:mm format\";","lastModifiedDate":"2025-03-27","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"xplus2g4"},"content":"    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"Duplicate modules found for the person.\";","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"xplus2g4"},"content":"    public static final String MESSAGE_OVERLAPPING_MODULE \u003d \"Overlapping modules found for the person.\";","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /** Messages for invalid date and time input **/","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String DATE_MESSAGE_CONSTRAINTS \u003d \"Invalid date input: %1$s is not a valid date.\";","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String TIME_MESSAGE_CONSTRAINTS \u003d \"Invalid time input: %1$s is not a valid time input.\";","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /** Regex to check if the date and time input are of the correct format**/","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"-"},"content":"    // Regex to check for dates of the form dd-mm-yyyy or dd-mm","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"-"},"content":"    // Single digit day and month are allowed","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String DATE_VALIDATION_REGEX \u003d \"^(?:0?[1-9]|[12][0-9]|3[01])-(?:0?[1-9]|1[0-2])(?:-\\\\d{4})?$\";","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"-"},"content":"    // Regex to check if time is of the form HH:mm","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String TIME_VALIDATION_REGEX \u003d \"^(?:[0-9]|[01]\\\\d|2[0-3]):[0-5]\\\\d$\";","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /** Parsers for date and time input **/","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final DateTimeFormatter DATE_FORMATTER \u003d new DateTimeFormatterBuilder()","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"-"},"content":"            .append(DateTimeFormatter.ofPattern(\"[d-M-u]\" + \"[d-M]\"))","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"-"},"content":"            .parseCaseInsensitive()","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"-"},"content":"            .parseDefaulting(ChronoField.YEAR, LocalDateTime.now().getYear())","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"-"},"content":"            .toFormatter()","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"-"},"content":"            .withResolverStyle(ResolverStyle.STRICT);","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static final DateTimeFormatter TIME_FORMATTER \u003d new DateTimeFormatterBuilder()","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"-"},"content":"            .append(DateTimeFormatter.ofPattern(\"H:mm\"))","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"-"},"content":"            .parseCaseInsensitive()","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"-"},"content":"            .toFormatter()","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"-"},"content":"            .withResolverStyle(ResolverStyle.STRICT);","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * and trailing whitespaces will be","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"-"},"content":"     *                        unsigned integer).","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}.","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid.","lastModifiedDate":"2018-07-10","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {","lastModifiedDate":"2018-07-10","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * Parses a {@code String day} into a {@code Day}.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code day} is invalid.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public static Day parseDay(String day) throws ParseException {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"-"},"content":"        requireNonNull(day);","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"-"},"content":"        String trimmedDay \u003d day.trim();","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"-"},"content":"        if (!Day.isValidDay(trimmedDay)) {","lastModifiedDate":"2025-04-01","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"-"},"content":"            throw new ParseException(Day.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"-"},"content":"        return new Day(trimmedDay);","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"-"},"content":"     * Parses a {@code String moduleCode} into a {@code ModuleCode}.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code moduleCode} is invalid.","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"-"},"content":"    public static ModuleCode parseModuleCode(String moduleCode) throws ParseException {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"-"},"content":"        requireNonNull(moduleCode);","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"-"},"content":"        String trimmedModuleCode \u003d moduleCode.trim();","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"-"},"content":"        if (!ModuleCode.isValidModuleCode(trimmedModuleCode)) {","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"-"},"content":"            throw new ParseException(ModuleCode.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"-"},"content":"        return new ModuleCode(trimmedModuleCode);","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-17","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}.","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid.","lastModifiedDate":"2018-07-10","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {","lastModifiedDate":"2018-07-10","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"-"},"content":"        requireNonNull(tag);","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}.","lastModifiedDate":"2017-03-07","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"-"},"content":"        requireNonNull(tags);","lastModifiedDate":"2017-05-15","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2017-02-11","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2017-02-11","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));","lastModifiedDate":"2017-05-30","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"-"},"content":"        return tagSet;","lastModifiedDate":"2017-03-07","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"-"},"content":"     * Parses a {@code String module} into a {@code Module}.","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code module} is invalid.","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"-"},"content":"    public static Module parseModule(String module) throws ParseException {","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"-"},"content":"        requireNonNull(module);","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"-"},"content":"        String trimmedModule \u003d module.trim();","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d Module.VALIDATION_REGEX.matcher(trimmedModule);","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(Module.MESSAGE_CONSTRAINTS, trimmedModule));","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"-"},"content":"        ModuleCode moduleCode \u003d parseModuleCode(matcher.group(\"moduleCode\"));","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"-"},"content":"        Day day \u003d parseDay(matcher.group(\"day\"));","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"-"},"content":"        LocalTime startTime \u003d parseTime(matcher.group(\"startTime\"));","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"-"},"content":"        LocalTime endTime \u003d parseTime(matcher.group(\"endTime\"));","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"xplus2g4"},"content":"        if (!endTime.isAfter(startTime)) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"xplus2g4"},"content":"            throw new ParseException(MESSAGE_INVALID_START_END_TIME);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"xplus2g4"},"content":"        }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"xplus2g4"},"content":"","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"-"},"content":"        return new Module(moduleCode, day, startTime, endTime);","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":224,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":226,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":227,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e modules} into a {@code Set\u003cModule\u003e}.","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":228,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":229,"author":{"gitId":"-"},"content":"    public static Set\u003cModule\u003e parseModules(Collection\u003cString\u003e modules) throws ParseException {","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":230,"author":{"gitId":"-"},"content":"        requireNonNull(modules);","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":231,"author":{"gitId":"-"},"content":"        final Set\u003cModule\u003e moduleSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":232,"author":{"gitId":"-"},"content":"        for (String moduleString : modules) {","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":233,"author":{"gitId":"xplus2g4"},"content":"            Module module \u003d parseModule(moduleString);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":234,"author":{"gitId":"xplus2g4"},"content":"            if (moduleSet.stream().anyMatch(module::isSameModule)) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":235,"author":{"gitId":"xplus2g4"},"content":"                throw new ParseException(MESSAGE_DUPLICATE_MODULE);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":236,"author":{"gitId":"xplus2g4"},"content":"            }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":237,"author":{"gitId":"xplus2g4"},"content":"            if (moduleSet.stream().anyMatch(module::isOverlapping)) {","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":238,"author":{"gitId":"xplus2g4"},"content":"                throw new ParseException(MESSAGE_OVERLAPPING_MODULE);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":239,"author":{"gitId":"xplus2g4"},"content":"            }","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":240,"author":{"gitId":"xplus2g4"},"content":"            moduleSet.add(module);","lastModifiedDate":"2025-04-05","isFullCredit":false},{"lineNumber":241,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":242,"author":{"gitId":"-"},"content":"        return moduleSet;","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":243,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":245,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":246,"author":{"gitId":"-"},"content":"     * Parses a {@code String date} into a {@code LocalDate}.","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":247,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":248,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code date} is in an invalid date format or is an invalid date input.","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":249,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":250,"author":{"gitId":"-"},"content":"    public static LocalDate parseDate(String date) throws ParseException {","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":251,"author":{"gitId":"-"},"content":"        if (!isValidDate(date)) {","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":252,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_DATE_FORMAT);","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":253,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":254,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":255,"author":{"gitId":"-"},"content":"            return LocalDate.parse(date, DATE_FORMATTER);","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":256,"author":{"gitId":"-"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":257,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(DATE_MESSAGE_CONSTRAINTS, date));","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":258,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":259,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":261,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":262,"author":{"gitId":"-"},"content":"     * Parses a {@code String time} into a {@code LocalTime}.","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":263,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":264,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code time} is in an invalid time format or is an invalid time input.","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":265,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":266,"author":{"gitId":"-"},"content":"    public static LocalTime parseTime(String time) throws ParseException {","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":267,"author":{"gitId":"-"},"content":"        if (!isValidTime(time)) {","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":268,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_TIME_FORMAT);","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":269,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":270,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":271,"author":{"gitId":"-"},"content":"            return LocalTime.parse(time, TIME_FORMATTER);","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":272,"author":{"gitId":"-"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":273,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(TIME_MESSAGE_CONSTRAINTS, time));","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":274,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":275,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":277,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":278,"author":{"gitId":"-"},"content":"     * Returns if a given string is a valid date.","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":279,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":280,"author":{"gitId":"-"},"content":"    private static boolean isValidDate(String test) {","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":281,"author":{"gitId":"-"},"content":"        assert test !\u003d null;","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":282,"author":{"gitId":"-"},"content":"        return test.matches(DATE_VALIDATION_REGEX);","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":283,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":284,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":285,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":286,"author":{"gitId":"-"},"content":"     * Returns if a given string is a valid time.","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":287,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2025-04-03","isFullCredit":false},{"lineNumber":288,"author":{"gitId":"-"},"content":"    private static boolean isValidTime(String test) {","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":289,"author":{"gitId":"-"},"content":"        assert test !\u003d null;","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":290,"author":{"gitId":"-"},"content":"        return test.matches(TIME_VALIDATION_REGEX);","lastModifiedDate":"2025-04-02","isFullCredit":false},{"lineNumber":291,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2025-03-18","isFullCredit":false},{"lineNumber":292,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11","isFullCredit":false}],"authorContributionMap":{"xplus2g4":15,"-":277}}]
